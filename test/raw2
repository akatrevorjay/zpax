#!/usr/bin/python

import sys
import os.path
import json
import select
import time

import zmq
from zmq.core import constants, error

ctx = zmq.Context()


class PS (object):

    def __init__(self, name, pub_addr, sub_addrs):
        self.name = name
        self.pub  = ctx.socket(zmq.PUB)
        self.sub  = ctx.socket(zmq.SUB)

        print 'BIND RESULT: ', self.pub.bind( pub_addr )
        
        for a in sub_addrs:
            self.sub.connect(a)

        self.sub.setsockopt(zmq.SUBSCRIBE, 'test_zmq')

        self.sub_fd = self.sub.getsockopt(constants.FD)
        self.pub_fd = self.pub.getsockopt(constants.FD)

        self.a = set()

    def close(self):
        self.pub.close()
        self.sub.close()

    def on_recv(self):
        try:
            self.pub.recv_multipart( constants.NOBLOCK )
        except:
            pass
        
        while True:
            try:
                parts = self.sub.recv_multipart( constants.NOBLOCK )
                self.a.add(parts[1])
                print 'RCV({0})'.format(self.name), 'from=', parts[1], 'all = ', self.a
            except error.ZMQError as e:
                if e.errno == constants.EAGAIN:
                    break
                raise e

    def send(self):
        print 'SND({0})'.format(self.name)
        self.pub.send_multipart( ['test_zmq', self.name ] )
        self.on_recv()
        


class MiniReactor (object):

    def __init__(self, ps_objs):
        self.pso = ps_objs
        self.r   = [ ps.sub_fd for ps in ps_objs ]

        #self.r.extend( [ ps.pub_fd for ps in ps_objs ] )
        self.fd_map = dict()
        for ps in ps_objs:
            self.fd_map[ ps.sub_fd ] = ps
            #self.fd_map[ ps.pub_fd ] = ps

        self.count = 0

    def run(self):
        while True:
            self.count += 1
            
            print '--- Loop({0}) ---'.format(self.count)
            
            r,w,x = select.select(self.r, [], [], 0.1)
            
            if not r and not w and not x:
                for ps in self.pso:
                    ps.send()

            for fd in r:
                self.fd_map[ fd ].on_recv()

            done = True
            for ps in self.pso:
                if ps.a != set(['a','b','c']):
                    done = False
                    
            if done:
                for p in self.pso:
                    p.close()
                return

                

def test():
    snames  = 'a b c'
    sockets = dict()
    l       = list()
    pubs    = [ 'ipc:///tmp/tzmq_{0}_pub'.format(n) for n in snames.split() ]
        
    for sname in snames.split():
        s = PS(sname, 'ipc:///tmp/tzmq_{0}_pub'.format(sname), pubs)
        sockets[sname] = s
        l.append(s)

    r = MiniReactor(l)

    r.run()


count = 0
while True:
    count += 1
    print '\n#########', count, '#########\n'
    test()
    if len(sys.argv) > 1:
        time.sleep(0.05)
    

    


