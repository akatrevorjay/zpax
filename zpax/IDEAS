* Buffered key=value assignments. Writes to different keys guarantee not to
  conflict.

* Multi-key commit: Check all key-sequence numbers in request match the current
  db state. If so, pass though to paxos for decision. If not, send nack.

* Parallel Paxos:
   - Modify node to support multiple paxos instances.
   - Use looping call (50ms timeout) to serialize the full list to
     disk. Alternating files like durable object. (may even use
     durable object or a variant thereof).
   - Need a queue of messages to send. May be able to wrap the pub
     node. Buffer writes and send all at once.
   - Sequence number needs to be per-key. (timestamp,proposer_id) may not be a
     bad way to go. No simultaneous collisions, same as ballots.
     Timestamp must be greater than previous.
   - Proposals need to include previous key version number.

   - Special key used for leadership election? Prepare/Promise packets are
     sent on this Pax instance. Results are handed to all other instances?

   - Maintain in-memory a hash of the key/values undergoing resolution.
     Reject new proposals for the same key until resolution is reached.


fecpax -
   - Maintain a table of Accept! packets for which the node does not yet
     have the slice. Remove after specified timeout. Probably want to use
     a class that's polled every few seconds to expunge packets rather than
     individual timeouts.

   - On slice reception:
       * Check table for Accept! - If version mismatch, reject
       * Check db for current version - If mismatch, reject
       * Create Pax node w/ current leader.
       * If already have Accept!, pass to pax node
       * Normal Paxos resolution/retries from there.
       
   - Missed slices / Resolutions
       * Maintain Sqlite DB of slice metadata. (use interface so sqlite
         could be replaced with xattrs or both)
       * Maintain a table for each peer node. On resolution, place an
         entry for the slice in each nodes table for which an Accepted
         was not seen.
       * These entries are deleted when delayed Accepted messages are
         seen or upon explicit notification.

       * Offline nodes start by querying all peers for this list.